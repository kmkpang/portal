// Generated by CoffeeScript 1.8.0
(function() {
  var addbts, addcirc, addtext, circ_config, circ_config_2, colors, config, draw_aplink, draw_mrt, draw_mrtp, draw_silom, draw_sukhumvit, drawcurve, drawcurve2, drawline, drawlineandstations, drawstations, getnextpos, getx, gety, hook_events, hor_text_config, initialize_paper, min, ns, path_config, stations_data, text_config, text_config_2, trainlines, translate, ver_text_config,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ns = {};

  stations_data = {};

  trainlines = {};

  config = {
    spacing: {
      x: 30,
      y: 25
    },
    textspacing: {
      x: 20,
      y: 16
    },
    ver_text_pos: 'left',
    label_spacing: 20,
    path_bend_radius: 13,
    start: {
      x: 165,
      y: 18
    }
  };

  circ_config = {
    'stroke-width': 4,
    r: 8,
    fill: '#fff'
  };

  colors = {
    sukhumvit: {
      stroke: '#7fb400'
    },
    silom: {
      stroke: '#007878'
    },
    mrt: {
      stroke: '#1f50c4'
    },
    mrtp: {
      stroke: '#8d4196'
    },
    ap_link: {
      stroke: '#cc5050'
    }
  };

  circ_config_2 = {
    'stroke-width': 4,
    fill: '#fff',
    r: 10
  };

  text_config = {
    'font-size': 12,
    'fill': '#fff'
  };

  text_config_2 = {
    'fill': '#fff',
    'font-size': 14
  };

  path_config = {
    'stroke-width': 10
  };

  ver_text_config = {
    'text-anchor': 'end'
  };

  hor_text_config = {
    'text-anchor': 'start'
  };


  /* END CONFIGS */

  addcirc = function(paper, x, y, radius) {
    var circle;
    circle = paper.circle(x, y, radius);
    circle.attr(circ_config);
    ns.drawings.push(circle);
    ns.drawings_and_text.push(circle);
    ns.circles.push(circle);
    return circle;
  };

  addtext = function(paper, x, y, text, attrs) {
    text = paper.text(x, y, text);
    text.attr(attrs);
    ns.texts.push(text);
    ns.drawings_and_text.push(text);
    return text;
  };

  getx = function(current, dir) {
    var x;
    if (dir == null) {
      dir = 'hor';
    }
    if (dir === "hor" || dir === "dgn") {
      x = current.x + config.spacing.x;
    } else if (dir === "ver") {
      x = current.x;
    }
    return x;
  };

  gety = function(current, dir) {
    var y;
    if (dir == null) {
      dir = 'hor';
    }
    if (dir === "hor") {
      y = current.y;
    } else if (dir === "ver" || dir === "dgn") {
      y = current.y + config.spacing.y;
    }
    return y;
  };

  getnextpos = function(start, dir) {
    return {
      x: getx(start, dir),
      y: gety(start, dir)
    };
  };

  addbts = function(paper, bts, current, dir) {
    var circ, circ_x, circ_y, key, text, text_attrs, text_x, text_y, value;
    if (dir == null) {
      dir = "hor";
    }
    circ_x = current.x;
    circ_y = current.y;
    text_x = circ_x;
    text_y = circ_y;
    text_attrs = text_config;
    if (dir === 'hor') {
      text_y -= config.textspacing.x;
    }
    if (dir === 'ver') {
      if (config.ver_text_pos === 'left') {
        text_x -= config.textspacing.y;
      } else {
        text_x += config.textspacing.y;
      }
    }
    circ = addcirc(paper, circ_x, circ_y, circ_config.r);
    text = addtext(paper, text_x, text_y, bts.name, text_attrs);
    circ.mytext = text;
    circ.bts = bts;
    for (key in text_config) {
      value = text_config[key];
      text.attr(key, value);
    }
    if (dir === 'ver') {
      for (key in ver_text_config) {
        value = ver_text_config[key];
        text.attr(key, value);
      }
    }
    if (dir === 'hor') {
      text.attr('transform', 'r-45 ' + text_x + ' ' + text_y);
      for (key in hor_text_config) {
        value = hor_text_config[key];
        text.attr(key, value);
      }
    }
    return text.attr(text_attrs);
  };

  drawline = function(paper, x1, y1, x2, y2) {
    var line;
    line = paper.path("M" + x1 + " " + y1 + "L" + x2 + " " + y2);
    line.attr(path_config);
    ns.drawings.push(line);
    ns.drawings_and_text.push(line);
    return line;
  };

  drawcurve = function(paper, x1, y1, x2, y2, radius) {
    var line;
    line = paper.path("M" + x1 + ", " + y1 + " A" + radius + "," + radius + " 0 0 1 " + x2 + "," + y2 + " ");
    line.attr(path_config);
    ns.drawings.push(line);
    ns.drawings_and_text.push(line);
    return line;
  };

  min = function(x, y) {
    if (x < y) {
      return x;
    } else {
      return y;
    }
  };

  drawcurve2 = function(paper, x1, y1, x2, y2, radius, corner) {
    var line1, line2;
    if (corner == null) {
      corner = 'nw';
    }
    if (corner === 'ne') {
      line1 = paper.path("M" + x1 + ", " + y1 + " L" + (x2 - radius) + ", " + y1);
      line2 = paper.path("M" + x2 + ", " + (y1 + radius) + " L" + x2 + ", " + y2);
      drawcurve(paper, x2 - radius, y1, x2, y1 + radius, radius);
    } else if (corner === 'sw') {
      line1 = paper.path("M" + x1 + ", " + y1 + " L" + x1 + ", " + (y1 + config.spacing.y - radius));
      line2 = paper.path("M" + (x2 - config.spacing.x + radius) + ", " + y2 + " L" + x2 + ", " + y2);
      drawcurve(paper, x2 - config.spacing.x + radius, y1 + config.spacing.y, x2 - config.spacing.x, y1 + config.spacing.y - radius, radius);
    }
    line1.attr(path_config);
    line2.attr(path_config);
    ns.drawings.push(line1);
    ns.drawings.push(line2);
    ns.drawings_and_text.push(line1);
    return ns.drawings_and_text.push(line2);
  };

  drawlineandstations = function(paper, train_line, stations_data, dir, config) {
    var break_line, corner, i, station, stations, to, _i, _len;
    stations = stations_data[train_line].stations;
    if (stations == null) {
      console.warn("stations_data does not have trainline '" + train_line + "'");
      return;
    }
    for (i = _i = 0, _len = stations.length; _i < _len; i = ++_i) {
      station = stations[i];
      break_line = __indexOf.call(config.breaks, i) >= 0;
      corner = 'ne';
      if (dir === 'ver' && break_line) {
        corner = 'sw';
      }
      if (i < stations.length - 1) {
        if (break_line) {
          to = getnextpos(config.start, 'dgn');
        } else {
          to = getnextpos(config.start, dir);
        }
        if (!break_line) {
          drawline(paper, config.start.x, config.start.y, to.x, to.y);
        } else {
          drawcurve2(paper, config.start.x, config.start.y, to.x, to.y, config.path_bend_radius, corner);
        }
      }
      addbts(paper, station, config.start, dir);
      config.start = to;
      if (break_line) {
        dir = dir === 'hor' ? 'ver' : 'hor';
      }
    }
    return stations;
  };

  initialize_paper = function(element) {
    var paper;
    paper = Raphael(element);
    ns.drawings = paper.set();
    ns.drawings_and_text = paper.set();
    ns.texts = paper.set();
    ns.circles = paper.set();
    return paper;
  };

  draw_sukhumvit = function(paper) {
    drawlineandstations(paper, 'sukhumvit', stations_data, 'ver', config);
    trainlines.sukhumvit = ns.drawings_and_text;
    ns.drawings.attr(colors.sukhumvit);
    ns.drawings = paper.set();
    ns.drawings_and_text = paper.set();
    ns.drawings.attr(colors.sukhumvit);
    return paper;
  };

  draw_silom = function(paper) {
    drawlineandstations(paper, 'silom', stations_data, 'hor', config);
    trainlines.silom = ns.drawings_and_text;
    ns.drawings.attr(colors.silom);
    ns.drawings = paper.set();
    ns.drawings_and_text = paper.set();
    return paper;
  };

  draw_mrt = function(paper) {
    drawlineandstations(paper, 'mrt', stations_data, 'hor', config);
    trainlines.mrt = ns.drawings_and_text;
    ns.drawings.attr(colors.mrt);
    ns.drawings = paper.set();
    ns.drawings_and_text = paper.set();
    return paper;
  };

  draw_mrtp = function(paper) {
    drawlineandstations(paper, 'mrtp', stations_data, 'ver', config);
    trainlines.mrtp = ns.drawings_and_text;
    ns.drawings.attr(colors.mrtp);
    ns.drawings = paper.set();
    ns.drawings_and_text = paper.set();
    return paper;
  };
  
  draw_aplink = function(paper) {
    drawlineandstations(paper, 'ap_link', stations_data, 'hor', config);
    trainlines.ap_link = ns.drawings_and_text;
    ns.drawings.attr(colors.ap_link);
    ns.drawings = paper.set();
    ns.drawings_and_text = paper.set();
    return paper;
  };

  hook_events = function() {
    var k, v;
    ns.circles.hover(function() {
      this.animate(circ_config_2, 50);
      return this.mytext.animate(text_config_2, 50);
    }, function() {
      this.animate(circ_config, 100);
      return this.mytext.animate(text_config, 100);
    });
    ns.circles.click(function() {
      var controllerElement, controllerScope;
      controllerElement = document.querySelector('#front-page-search-form');
      controllerScope = angular.element(controllerElement).scope();
      controllerScope.searchfilter.latitude = this.bts.lat;
      controllerScope.searchfilter.longitude = this.bts.lng;
      controllerScope.searchfilter.transport_name = this.bts.name;
      controllerScope.searchfilter.transport_station = this.bts.id;
      controllerScope.searchfilter.order = 'ORDER_BY_NEAREST_FIRST';
      controllerScope.savefilter();
      controllerScope.$apply();
      return controllerElement.submit();
    });
    for (k in trainlines) {
      v = trainlines[k];
      v.attr({
        opacity: 0
      });
    }
    $('.show_stations').click(function(e) {
      var controllerElement, controllerScope, train_line;
      e.preventDefault();
      train_line = $(this).data('train-line');
      controllerElement = document.querySelector('#front-page-search-form');
      controllerScope = angular.element(controllerElement).scope();
      controllerScope.searchfilter.transport_line = train_line;
      controllerScope.$apply();
      for (k in trainlines) {
        v = trainlines[k];
        if (k !== train_line) {
          v.animate({
            opacity: 0
          }, 200, 'linear', (function(k, v) {
            return function() {
              return v.hide();
            };
          })(k, v));
        }
      }
      return trainlines[train_line].show().animate({
        opacity: 1
      }, 200);
    });
    $('.show_stations[data-train-line="sukhumvit"]').trigger('click');
  };

  " Given a JSON object, `name` is set to `name_{lang}`";

  translate = function(obj, lang) {
    var lang_key;
    if (lang == null) {
      lang = 'en';
    }
    lang_key = 'name_' + lang;
    if (obj[lang_key] != null) {
      obj['name'] = obj[lang_key];
    }
  };

  drawstations = function(paper, stations) {
    var key, lang, line, station, _i, _len, _ref;
    if (stations != null) {
      lang = window.langHalf != null ? window.langHalf : 'en';
      for (key in stations) {
        line = stations[key];
        translate(line, lang);
        _ref = line.stations;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          station = _ref[_i];
          translate(station, lang);
        }
      }
    }
    config.breaks = [6];
    config.start = {
      x: 140,
      y: 35
    };
    config.spacing = {
      x: 35,
      y: 23
    };
    draw_sukhumvit(paper);
    config.start = {
      x: 155,
      y: 193
    };
    config.spacing = {
      x: 40,
      y: 25
    };
    config.breaks = [];
    draw_silom(paper);
    config.start = {
      x: 40,
      y: 193
    };
    config.spacing = {
      x: 35,
      y: 50
    };
    draw_mrt(paper);
    config.breaks = [0];
    config.start = {
      x: 146,
      y: 120
    };
    config.spacing = {
      x: 35,
      y: 50
    };
    draw_mrtp(paper);
    config.breaks = [6];
    config.start = {
      x: 170,
      y: 140
    };
    config.spacing = {
      x: 50,
      y: 50
    };
    draw_aplink(paper);
    hook_events();
  };

  this.loadBtsMap = function(element, url, callback, error) {
    if (callback == null) {
      callback = null;
    }
    if (error == null) {
      error = null;
    }
    if (url == null) {
      return;
    }
    $.ajax(url, {
      dataType: 'json'
    }).done(function(data) {
      var paper;
      stations_data = data;
      if (stations_data == null) {
        console.error("Invalid stations data");
        return;
      }
      paper = initialize_paper(element, 720, 220);
      drawstations(paper, stations_data);
      if (callback != null) {
        callback.apply();
      }
    }).fail(function() {
      console.error("Error loading stations json file");
      if (error != null) {
        return error.apply();
      }
    });
  };

}).call(this);

//# sourceMappingURL=btsmap.js.map
